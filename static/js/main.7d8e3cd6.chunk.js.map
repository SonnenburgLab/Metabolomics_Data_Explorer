{"version":3,"sources":["MenuList.js","MultilineOption.js","utils.js","InVitro.js","InVivo.js","App.js","serviceWorker.js","index.js"],"names":["MenuList","props","rows","children","react_default","a","createElement","index_esm","height","itemSize","itemCount","length","_ref","index","style","isScrolling","Object","objectSpread","whiteSpace","MultilineOption","innerProps","chunk_5d200a41_browser_esm","Option","label","data","description","className","getYRangeFromSeries","series","yValues","getFieldValuesFromSeries","yMaxValue","Math","max","apply","toConsumableArray","yMinValue","min","yRange","yMaxBuffer","field","allFieldValues","map","serie","dataPoint","flat","Set","caseInsensitiveStringCmp","b","toLowerCase","compareLabels","compareMediaLabels","value","getMetaboliteOptions","columnsToSkip","firstRow","metabolites","_loop","key","includes","startsWith","filter","row","undefined","metaboliteName","split","push","metabolite","toUpperCase","sort","mediaLabels","mm","bhis","cm","mml","mms","mm_s04_citrate","pyg","pyg_muc","paf","rcm","rcml","rcmsg","rcmwoa","tsab","ycfag","communityColonizations","Bt_Ca_Er_Pd_Et","Cs_Bt_Ca_Er_Pd_Et","monoColonizations","Bt","Cs","Cp","As","conventionalColonizations","conventional","sampleTypeLabels","caecal","InVitro","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","taxonomySelection","taxonomy","media","metaboliteSelection","metadataCols","taxonomyOptions","taxonomyMediaOptions","metaboliteOptions","metaboliteMediaOptions","_this2","Papa","parse","download","complete","metadata","matrix","validData","idx","assign","setState","getTaxonomyOptions","meta","fields","header","selectedValue","medias","distinctMedias","mode","taxonomies","_this3","y","Number","name","allNames","xValueIndices","_i","_Object$entries","entries","_ref3","_ref2","slicedToArray","plotData","id","x","mediaRows","currentMediaRow","_i2","_Object$entries2","_ref6","_ref5","_this4","_this$getPlotData","getPlotData","plotMinWidth","keys","htmlFor","react_select_browser_esm","components","isClearable","options","onChange","val","handleTaxonomySelectionChange","find","isDisabled","handleMetaboliteSelectionChange","width","overflowX","overflowY","minWidth","nivo_scatterplot_esm","tooltip","_ref7","node","background","border","color","fontSize","padding","maxWidth","wordWrap","formattedY","colors","scheme","theme","pixelRatio","margin","top","right","bottom","left","xScale","type","yScale","nodeSize","gridXValues","axisBottom","format","d","orient","tickValues","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","React","Component","InVivo","colonizationSelection","colonization","sampleType","colonizationOptions","colonizationSampleTypeOptions","metaboliteSampleTypeOptions","getColonizationOptions","sampleTypes","distinctSampleTypes","colonizations","distinctColonizations","colonizationGroups","community","mono","i","localeCompare","sampleTypeRows","currentSampleTypeRow","getPrettyName","allColonizations","handleColonizationSelectionChange","styles","option","provided","App","react_router_dom","to","exact","activeClassName","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d8e3cd6.chunk.js","sourcesContent":["import React from 'react';\nimport { FixedSizeList } from 'react-window';\n\nconst MenuList = props => {\n  const rows = props.children;\n\n  return (\n    <FixedSizeList\n      height={300}\n      itemSize={30}\n      itemCount={rows.length}\n    >\n      {({ index, isScrolling, style }) => (\n        <div style={{...style, whiteSpace: 'nowrap'}}>{rows[index]}</div>\n      )}\n    </FixedSizeList>\n  );\n}\n\nexport default MenuList;\n","import React from 'react';\nimport { components } from 'react-select';\n\nconst MultilineOption = props => {\n  const { innerProps } = props;\n\n  return (\n    <components.Option {...props}>\n      <div>{props.label}</div>\n      {props.data.description ? (\n        <div className=\"option-byline\">{props.data.description}</div>\n      ) : null}\n    </components.Option>\n  );\n}\n\nexport default MultilineOption;\n","export const getYRangeFromSeries = (series) => {\n  const yValues = getFieldValuesFromSeries(series, 'y');\n  const yMaxValue = Math.max(...yValues);\n  const yMinValue = Math.min(...yValues);\n  const yRange = yMaxValue - yMinValue;\n\n  if (yRange == 0) {\n    let yMaxBuffer = yMaxValue * 2;\n    return [Math.min(yMaxBuffer, 0), Math.max(yMaxBuffer, 0)];\n\n  } else {\n    const yMaxBuffer = yMaxValue + yRange * 0.1;\n    const yMinBuffer = yMinValue - yRange * 0.1;\n    return [yMinBuffer, yMaxBuffer];\n  }\n}\n\nexport const getFieldValuesFromSeries = (series, field) => {\n  const allFieldValues = series\n    .map(serie => serie.map(dataPoint => dataPoint[field]))\n    .flat();\n\n  const distinctXValues = [...new Set(allFieldValues)];\n\n  return distinctXValues;\n}\n\nexport const caseInsensitiveStringCmp = (a, b) => {\n  a = a.toLowerCase();\n  b = b.toLowerCase();\n\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nexport const compareLabels = (a, b) => {\n  if (a.label < b.label) {\n    return -1;\n  }\n\n  if (a.label > b.label) {\n    return 1;\n  }\n\n  return 0;\n};\n\nexport const compareMediaLabels = (a, b) => {\n  if (a.value === 'mm') {\n    return -1;\n  } else if (b.value === 'mm') {\n    return 1;\n  }\n\n  if (a.label < b.label) {\n    return -1;\n  }\n\n  if (a.label > b.label) {\n    return 1;\n  }\n\n  return 0;\n};\n\nexport const getMetaboliteOptions = (data, columnsToSkip) => {\n  const firstRow = data[0];\n  const metabolites = [];\n\n  for (let key in firstRow) {\n    if (columnsToSkip.includes(key) || key.startsWith('IS_')) {\n      continue;\n    }\n\n    if (data.filter(row => row[key] !== undefined && row[key] !== \"\").length == 0) {\n      continue;\n    }\n\n    const metaboliteName = key.split('.')[0];\n    metabolites.push(metaboliteName);\n  }\n\n  const distinctMetabolites = [...new Set(metabolites)];\n\n  return distinctMetabolites\n    .map(metabolite => ({value: metabolite, label: metabolite.toUpperCase()}))\n    .sort(compareLabels);\n};\n\nexport const mediaLabels = {\n  'mm': 'Mega Media',\n  'bhis': 'Brain Heart Infusion-Supplemented (BHIS)',\n  'cm': 'Chopped Meat (CM)',\n  'mml': 'Mega Media with Lactate',\n  'mms': 'Mega Media with Starch',\n  'mm_s04_citrate': 'Mega Media with Sulfate, Citrate',\n  'pyg': 'Peptone Yeast Glucose (PYG)',\n  'pyg_muc': 'Peptone Yeast Glucose (PYG) with Mucus',\n  'paf': 'Polyamine-free Media',\n  'rcm': 'Reinforced Clostridial Media (RCM)',\n  'rcml': 'Reinforced Clostridial Media (RCM) with Lactate',\n  'rcmsg': 'Reinforced Clostridial Media (RCM) with Starch, Glucose',\n  'rcmwoa': 'Reinforced Clostridial Media (RCM) without Agar',\n  'tsab': 'Tryptic Soy Agar (TSA) with Blood',\n  'ycfag': 'Yeast, Casitone, Fatty Acids (YCFA) with Glucose',\n};\n\nexport const communityColonizations = {\n  'Bt_Ca_Er_Pd_Et': {\n    label: 'Bt, Ca, Er, Pd, Et',\n    description:\n      \"Bacteroides thetaiotaomicron VPI 5482\\n\" +\n      \"Collinsella aerofaciens ATCC 25986\\n\" +\n      \"Eubacterium rectale ATCC 33656\\n\" +\n      \"Parabacteroides distasonis ATCC 8503\\n\" +\n      \"Edwardsiella tarda ATCC 23685\",\n  },\n  'Cs_Bt_Ca_Er_Pd_Et': {\n    label: 'Cs, Bt, Ca, Er, Pd, Et',\n    description:\n      \"Clostridium sporogenes ATCC 15579\\n\" +\n      \"Bacteroides thetaiotaomicron VPI 5482\\n\" +\n      \"Collinsella aerofaciens ATCC 25986\\n\" +\n      \"Eubacterium rectale ATCC 33656\\n\" +\n      \"Parabacteroides distasonis ATCC 8503\\n\" +\n      \"Edwardsiella tarda ATCC 23685\",\n  },\n};\n\nexport const monoColonizations = {\n  'Bt': {\n    label: 'Bt',\n    description: \"Bacteroides thetaiotaomicron VPI 5482\",\n  },\n  'Cs': {\n    label: 'Cs',\n    description: \"Clostridium sporogenes ATCC 15579\",\n  },\n  'Cp': {\n    label: 'Cp',\n    description: \"Citrobacter portucalensis BEI HM-34\",\n  },\n  'As': {\n    label: 'As',\n    description: \"Anaerostipes sp. BEI HM-220\",\n  },\n};\n\nexport const conventionalColonizations = {\n  'conventional': {\n    label: 'Conventional',\n  }\n};\n\nexport const sampleTypeLabels = {\n  'caecal': 'cecal',\n};\n","import React from 'react';\nimport Papa from 'papaparse';\nimport Select from 'react-select'\nimport { ResponsiveScatterPlotCanvas } from '@nivo/scatterplot'\nimport MenuList from './MenuList.js';\nimport MultilineOption from './MultilineOption.js'\nimport {\n  getYRangeFromSeries,\n  getMetaboliteOptions,\n  caseInsensitiveStringCmp,\n  compareMediaLabels,\n  mediaLabels,\n} from './utils.js'\n\nclass InVitro extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taxonomySelection: {\n        taxonomy: null,\n        media: null,\n      },\n      metaboliteSelection: {\n        metabolite: null,\n        media: null,\n      },\n      data: [],\n      metadataCols: [],\n      taxonomyOptions: [],\n      taxonomyMediaOptions: [],\n      metaboliteOptions: [],\n      metaboliteMediaOptions: [],\n    };\n  }\n\n  componentDidMount() {\n    Papa.parse(\"in_vitro_metadata.txt\", {\n      download: true,\n      complete: metadata => {\n        Papa.parse(\"in_vitro_data.txt\", {\n          download: true,\n          complete: matrix => {\n            matrix = matrix.data.map((row, idx) => Object.assign({}, row, metadata.data[idx]));\n\n            const validData = matrix.filter(\n              row => row['sample_type'] === 'supernatant'\n            );\n\n            this.setState({\n              data: validData,\n              taxonomyOptions: this.getTaxonomyOptions(validData),\n              metaboliteOptions: getMetaboliteOptions(validData, metadata.meta.fields),\n              metadataCols: metadata.meta.fields,\n            });\n          },\n          header: true,\n        });\n\n      },\n      header: true,\n    });\n  }\n\n  handleTaxonomySelectionChange(field, selectedValue) {\n    if (field === 'taxonomy') {\n      if (selectedValue) {\n        const medias = this.state.data\n          .filter(row => row['taxonomy'] === selectedValue['value'])\n          .map(row => row['media']);\n        const distinctMedias = [...new Set(medias)];\n\n        this.setState({\n          taxonomySelection: {\n            taxonomy: selectedValue['value'],\n            media: null,\n          },\n          metaboliteSelection: {\n            metabolite: null,\n            media: null,\n            mode: null,\n          },\n          taxonomyMediaOptions: distinctMedias.map(\n            media => ({\n              value: media,\n              label: mediaLabels[media] ? mediaLabels[media] : media,\n            })\n          ),\n        });\n      } else {\n        this.setState({\n          taxonomySelection: {\n            taxonomy: null,\n            media: null,\n          },\n        });\n      }\n    } else if (field === 'media') {\n      this.setState({\n        taxonomySelection: {\n          taxonomy: this.state.taxonomySelection.taxonomy,\n          media: selectedValue ? selectedValue['value'] : null,\n        },\n      });\n    }\n  }\n\n  handleMetaboliteSelectionChange(field, selectedValue) {\n    if (field === 'metabolite') {\n      if (selectedValue) {\n        const metabolite = selectedValue['value'];\n\n        const medias = this.state.data\n          .filter(row => row[metabolite] !== \"\" && row[metabolite] !== undefined)\n          .map(row => row['media']);\n\n        const distinctMedias = [...new Set(medias)];\n\n        this.setState({\n          metaboliteSelection: {\n            metabolite: selectedValue['value'],\n            media: null,\n          },\n          taxonomySelection: {\n            taxonomy: null,\n            media: null,\n          },\n          metaboliteMediaOptions: distinctMedias.map(\n            media => ({\n              value: media,\n              label: mediaLabels[media] ? mediaLabels[media] : media,\n            })\n          ),\n        });\n      } else {\n        this.setState({\n          metaboliteSelection: {\n            metabolite: null,\n            media: null,\n          },\n        });\n      }\n    } else if (field === 'media') {\n      this.setState({\n        metaboliteSelection: {\n          metabolite: this.state.metaboliteSelection.metabolite,\n          media: selectedValue ? selectedValue['value'] : null,\n        },\n      });\n    }\n  }\n\n  getTaxonomyOptions(data) {\n    const taxonomies = data.map(row => row['taxonomy']);\n    const distinctTaxonomies = [...new Set(taxonomies)]\n      .sort(caseInsensitiveStringCmp);\n\n    return distinctTaxonomies.map(taxonomy => ({value: taxonomy, label: taxonomy}));\n  }\n\n  getPlotData() {\n    if (this.state.taxonomySelection.media !== null) {\n      const rows = this.state.data\n        .filter(row => row['taxonomy'] === this.state.taxonomySelection.taxonomy\n          && row['media'] === this.state.taxonomySelection.media\n        )\n\n      let data = [];\n\n      for (let idx in rows) {\n        const row = rows[idx];\n\n        for (let metabolite in row) {\n          if (this.state.metadataCols.includes(metabolite) ||\n              metabolite.startsWith('IS_')) {\n            continue;\n          }\n\n          let y = Number(row[metabolite]);\n\n          if (y === 0) {\n            continue;\n          }\n\n          data.push({name: metabolite, y: y});\n        }\n      }\n\n      const allNames = [...new Set(data.map(dataPoint => dataPoint.name))]\n        .sort(caseInsensitiveStringCmp);\n\n      const xValueIndices = {};\n\n      for (let [key, value] of Object.entries(allNames)) {\n        xValueIndices[value] = Number(key);\n      }\n\n      data = data.map(dataPoint => ({\n        x: xValueIndices[dataPoint.name],\n        y: dataPoint.y,\n        name: dataPoint.name\n      }));\n\n      return {\n        plotData: [\n          {\n            id: 'all',\n            data: data,\n          },\n        ],\n        allNames: allNames,\n        yRange: getYRangeFromSeries([data]),\n      };\n    } else if (this.state.metaboliteSelection.media !== null) {\n      const mediaRows = this.state.data\n        .filter(row => row['media'] === this.state.metaboliteSelection.media);\n\n      let data = [];\n\n      for (let idx in mediaRows) {\n        const currentMediaRow = mediaRows[idx];\n        const y = currentMediaRow[this.state.metaboliteSelection.metabolite]\n\n        if (y === \"\" || y === undefined) {\n          continue;\n        }\n\n        data.push({ name: currentMediaRow['taxonomy'], y: Number(y) });\n      }\n\n      const allNames = [...new Set(data.map(dataPoint => dataPoint.name))]\n        .sort(caseInsensitiveStringCmp);\n\n      const xValueIndices = {};\n\n      for (let [key, value] of Object.entries(allNames)) {\n        xValueIndices[value] = Number(key);\n      }\n\n      data = data.map(dataPoint => ({\n        x: xValueIndices[dataPoint.name],\n        y: dataPoint.y,\n        name: dataPoint.name\n      }));\n\n      return {\n        plotData: [\n          {\n            id: 'all',\n            data: data,\n          },\n        ],\n        allNames: allNames,\n        yRange: getYRangeFromSeries([data]),\n      };\n    } else {\n      return {\n        plotData: [],\n        allNames: {},\n        yRange: [0, 0],\n      };\n    }\n  }\n\n  render() {\n    const { plotData, allNames, yRange } = this.getPlotData();\n\n    const MIN_PLOT_WIDTH = 300;\n    const plotMinWidth = Math.max(MIN_PLOT_WIDTH, 11 * (Object.keys(allNames)).length + 100);\n\n    return (\n      <div className=\"App\">\n        <p>\n          This page enables plotting <em>in vitro</em> data from Han and Van Treuren <em>et al</em>.\n        </p>\n\n        <p>\n          Select a <strong>Taxonomy</strong> and <strong>Media</strong> below to plot the relative fold\n          change across all metabolites.\n        </p>\n\n        <p>\n          Alternatively, select a <strong>Metabolite</strong> and <strong>Media</strong> below to plot the relative fold\n          change across all taxonomies.\n        </p>\n\n        <form className=\"form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"taxonomy\">Taxonomy</label>\n            <Select id=\"taxonomy\"\n              className=\"dropdown\"\n              components={{ MenuList }}\n              isClearable={true}\n              options = {this.state.taxonomyOptions}\n              onChange = {val => this.handleTaxonomySelectionChange('taxonomy', val)}\n              value={\n                this.state.taxonomyOptions\n                  .find(taxonomy => taxonomy.value === this.state.taxonomySelection.taxonomy) || null\n              }\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"media\">Media</label>\n            <Select id=\"media\"\n              className=\"dropdown\"\n              isClearable={true}\n              isDisabled={this.state.taxonomySelection.taxonomy === null}\n              options={this.state.taxonomyMediaOptions.sort(compareMediaLabels)}\n              onChange = {val => this.handleTaxonomySelectionChange('media', val)}\n              value={\n                this.state.taxonomyMediaOptions\n                  .find(media => media.value === this.state.taxonomySelection.media) || null\n              }\n            />\n          </div>\n        </form>\n\n        <form className=\"form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"metabolite\">Metabolite</label>\n            <Select id=\"metabolite\"\n              className=\"dropdown\"\n              components={{ MenuList }}\n              isClearable={true}\n              options = {this.state.metaboliteOptions}\n              onChange = {val => this.handleMetaboliteSelectionChange('metabolite', val)}\n              value={\n                this.state.metaboliteOptions\n                  .find(metabolite => metabolite.value === this.state.metaboliteSelection.metabolite) || null\n              }\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"media\">Media</label>\n            <Select id=\"media\"\n              className=\"dropdown\"\n              isClearable={true}\n              isDisabled={this.state.metaboliteSelection.metabolite === null}\n              options={this.state.metaboliteMediaOptions.sort(compareMediaLabels)}\n              onChange={val => this.handleMetaboliteSelectionChange('media', val)}\n              value={\n                this.state.metaboliteMediaOptions\n                  .find(media => media.value === this.state.metaboliteSelection.media) || null\n              }\n            />\n          </div>\n        </form>\n\n        {plotData.length > 0 ? (\n          <div style={{width: '100%', overflowX: 'scroll', overflowY: 'hidden'}}>\n            <div style={{\n              minWidth: plotMinWidth + 'px',\n              width: plotMinWidth < 500 ? (plotMinWidth + 'px') : null,\n              height: '1100px'\n            }}>\n              <ResponsiveScatterPlotCanvas\n                tooltip={({ node }) => {\n                  return (\n                    <div\n                      style={{\n                        background: '#fff',\n                        border: '1px solid #ccc',\n                        color: node.style.color,\n                        fontSize: '12px',\n                        padding: '6px 6px',\n                      }}\n                    >\n                      <div style={{maxWidth: '400px', wordWrap: 'break-word'}}>\n                        <strong>{this.state.metaboliteSelection.metabolite ? 'taxonomy' : 'metabolite'}</strong>\n                        : {node.data.name}\n                      </div>\n                      <div><strong>y</strong>: {node.data.formattedY}</div>\n                    </div>\n                    );\n                }}\n                data={plotData}\n                colors={{ scheme: 'category10' }}\n                theme={{fontSize: 10}}\n                pixelRatio={2}\n                margin={{ top: 80, right: 20, bottom: 740, left: 90 }}\n                xScale={{ type: 'linear', min: 0, max: 'auto' }}\n                yScale={{ type: 'linear', min: yRange[0], max: yRange[1] }}\n                nodeSize={4}\n                gridXValues={Object.keys(allNames)}\n                axisBottom={{\n                  format: d => {\n                    return allNames[d];\n                  },\n                  orient: 'bottom',\n                  tickValues: Object.keys(allNames),\n                  tickSize: 5,\n                  tickPadding: 5,\n                  tickRotation: -90,\n                  legend: this.state.metaboliteSelection.metabolite ? 'Taxonomy' : 'Metabolite',\n                  legendPosition: 'middle',\n                  legendOffset: this.state.metaboliteSelection.metabolite ? 300 : 700\n                }}\n                axisLeft={{\n                  orient: 'left',\n                  tickSize: 5,\n                  tickPadding: 5,\n                  tickRotation: 0,\n                  legend: 'Relative fold change versus media blank controls (log2)',\n                  legendPosition: 'middle',\n                  legendOffset: -60\n                }}\n              />\n            </div>\n          </div>\n        ) : null}\n\n        {plotData.length == 0 ? (\n          <footer>\n            <p>About the Website:\n              The Metabolomics Data Explorer was designed by Shuo Han.\n              © The Sonnenburg Lab 2020, Stanford University\n            </p>\n          </footer>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default InVitro;\n","import React from 'react';\nimport Papa from 'papaparse';\nimport Select from 'react-select'\nimport { ResponsiveScatterPlotCanvas } from '@nivo/scatterplot'\nimport MenuList from './MenuList.js';\nimport MultilineOption from './MultilineOption.js'\nimport {\n  getYRangeFromSeries,\n  getMetaboliteOptions,\n  communityColonizations,\n  monoColonizations,\n  conventionalColonizations,\n  sampleTypeLabels,\n} from './utils.js'\n\n\nclass InVivo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colonizationSelection: {\n        colonization: null,\n        sampleType: null,\n      },\n      metaboliteSelection: {\n        metabolite: null,\n        sampleType: null,\n      },\n      data: [],\n      metadataCols: [],\n      colonizationOptions: [],\n      colonizationSampleTypeOptions: [],\n      metaboliteOptions: [],\n      metaboliteSampleTypeOptions: [],\n    };\n  }\n\n  componentDidMount() {\n    Papa.parse(\"mouse_metadata.txt\", {\n      download: true,\n      complete: metadata => {\n        Papa.parse(\"mouse_data.txt\", {\n          download: true,\n          complete: matrix => {\n            matrix = matrix.data.map((row, idx) => Object.assign({}, row, metadata.data[idx]));\n\n            const validData = matrix.filter(\n              row => row['colonization'] !== 'germ-free' && row['colonization'] !== undefined\n            );\n\n            this.setState({\n              data: validData,\n              colonizationOptions: this.getColonizationOptions(validData),\n              metaboliteOptions: getMetaboliteOptions(validData, metadata.meta.fields),\n              metadataCols: metadata.meta.fields,\n            });\n          },\n          header: true,\n        });\n\n      },\n      header: true,\n    });\n  }\n\n  handleColonizationSelectionChange(field, selectedValue) {\n    if (field === 'colonization') {\n      if (selectedValue) {\n        const sampleTypes = this.state.data\n          .filter(row => row['colonization'] === selectedValue['value'])\n          .map(row => row['sample_type']);\n        const distinctSampleTypes = [...new Set(sampleTypes)];\n\n        this.setState({\n          colonizationSelection: {\n            colonization: selectedValue['value'],\n            sampleType: null,\n          },\n          metaboliteSelection: {\n            metabolite: null,\n            sampleType: null,\n          },\n          colonizationSampleTypeOptions: distinctSampleTypes.map(\n            sampleType => ({\n              value: sampleType,\n              label: sampleTypeLabels[sampleType] ? sampleTypeLabels[sampleType] : sampleType,\n            })\n          ),\n        });\n      } else {\n        this.setState({\n          colonizationSelection: {\n            colonization: null,\n            sampleType: null,\n          },\n        });\n      }\n    } else if (field === 'sample_type') {\n      if (selectedValue) {\n        this.setState({\n          colonizationSelection: {\n            ...this.state.colonizationSelection,\n            sampleType: selectedValue['value'],\n          },\n        });\n      } else {\n        this.setState({\n          colonizationSelection: {\n            ...this.state.colonizationSelection,\n            sampleType: null,\n          },\n        });\n      }\n    }\n  }\n\n  handleMetaboliteSelectionChange(field, selectedValue) {\n    if (field === 'metabolite') {\n      if (selectedValue) {\n        const metabolite = selectedValue['value'];\n\n        const sampleTypes = this.state.data\n          .filter(row => row[metabolite] !== \"\" && row[metabolite] !== undefined)\n          .map(row => row['sample_type']);\n\n        const distinctSampleTypes = [...new Set(sampleTypes)];\n\n        this.setState({\n          metaboliteSelection: {\n            metabolite: selectedValue['value'],\n            sampleType: null,\n          },\n          colonizationSelection: {\n            colonization: null,\n            sampleType: null,\n          },\n          metaboliteSampleTypeOptions: distinctSampleTypes.map(\n            sampleType => ({\n              value: sampleType,\n              label: sampleTypeLabels[sampleType] ? sampleTypeLabels[sampleType] : sampleType,\n            })\n          ),\n        });\n      } else {\n        this.setState({\n          metaboliteSelection: {\n            metabolite: null,\n            sampleType: null,\n          },\n        });\n      }\n    } else if (field === 'sample_type') {\n      if (selectedValue) {\n        this.setState({\n          metaboliteSelection: {\n            ...this.state.metaboliteSelection,\n            sampleType: selectedValue['value'],\n          },\n        });\n      } else {\n        this.setState({\n          metaboliteSelection: {\n            ...this.state.metaboliteSelection,\n            sampleType: null,\n          },\n        });\n      }\n    }\n  }\n\n  getColonizationOptions(data) {\n    const colonizations = data.map(row => row['colonization']);\n    const distinctColonizations = [...new Set(colonizations)];\n\n    const colonizationGroups = {\n      community: [],\n      mono: [],\n      conventional: [],\n    };\n\n    for (let i in distinctColonizations) {\n      const colonization = distinctColonizations[i];\n\n      if (communityColonizations[colonization]) {\n        colonizationGroups.community.push({\n          value: colonization,\n          label: communityColonizations[colonization].label,\n          description: communityColonizations[colonization].description\n        });\n      } else if (conventionalColonizations[colonization]) {\n        colonizationGroups.conventional.push({\n          value: colonization,\n          label: conventionalColonizations[colonization].label,\n        });\n      } else {\n        colonizationGroups.mono.push({\n          value: colonization,\n          label: monoColonizations[colonization].label,\n          description: monoColonizations[colonization].description\n        });\n      }\n    }\n\n    return [\n      {\n        label: 'Defined Community',\n        options: colonizationGroups.community,\n      },\n      {\n        label: 'Mono-colonization',\n        options: colonizationGroups.mono,\n      },\n      {\n        label: 'Conventional',\n        options: colonizationGroups.conventional,\n      }\n    ];\n  }\n\n  getPlotData() {\n    if (this.state.colonizationSelection.sampleType !== null) {\n      // Find the replicates matching the current selection\n      const rows = this.state.data\n        .filter(row => row['colonization'] === this.state.colonizationSelection.colonization\n          && row['sample_type'] === this.state.colonizationSelection.sampleType\n          )\n\n      let data = [];\n\n      for (let idx in rows) {\n        const row = rows[idx];\n\n        for (let metabolite in row) {\n          if (this.state.metadataCols.includes(metabolite) ||\n              metabolite.startsWith('IS_')) {\n            continue;\n          }\n\n          const y = Number(row[metabolite]);\n\n          if (y === 0) {\n            continue;\n          }\n\n          data.push({name: metabolite, y: y});\n        }\n      }\n\n      const allNames = [...new Set(data.map(dataPoint => dataPoint.name))]\n        .sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n\n      const xValueIndices = {};\n\n      for (let [key, value] of Object.entries(allNames)) {\n        xValueIndices[value] = Number(key);\n      }\n\n      data = data.map(dataPoint => ({\n        x: xValueIndices[dataPoint.name],\n        y: dataPoint.y,\n        name: dataPoint.name\n      }));\n\n      return {\n        plotData: [\n          {\n            id: 'all',\n            data: data,\n          },\n        ],\n        allNames: allNames,\n        yRange: getYRangeFromSeries([data]),\n      };\n    } else if (this.state.metaboliteSelection.sampleType !== null) {\n      const sampleTypeRows = this.state.data\n        .filter(row => row['sample_type'] === this.state.metaboliteSelection.sampleType);\n\n      let data = [];\n\n      for (let idx in sampleTypeRows) {\n        const currentSampleTypeRow = sampleTypeRows[idx];\n        const y = currentSampleTypeRow[this.state.metaboliteSelection.metabolite]\n\n        if (y === \"\" || y === undefined) {\n          continue;\n        }\n\n        data.push({name: currentSampleTypeRow['colonization'], y: y});\n      }\n\n      const allNames = [...new Set(data.map(dataPoint => dataPoint.name))]\n        .sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n\n      const xValueIndices = {};\n\n      for (let [key, value] of Object.entries(allNames)) {\n        xValueIndices[value] = Number(key);\n      }\n\n      const getPrettyName = name => communityColonizations[name]\n        ? communityColonizations[name].label\n        : monoColonizations[name]\n          ? monoColonizations[name].label\n          : conventionalColonizations[name].label;\n\n      data = data.map(dataPoint => ({\n        x: xValueIndices[dataPoint.name],\n        y: dataPoint.y,\n        name: getPrettyName(dataPoint.name)\n      }));\n\n      return {\n        plotData: [\n          {\n            id: 'all',\n            data: data,\n          },\n        ],\n        allNames: allNames.map(getPrettyName),\n        yRange: getYRangeFromSeries([data]),\n      };\n    } else {\n      return {\n        plotData: [],\n        allNames: {},\n        yRange: [0, 0],\n      };\n    }\n  }\n\n  render() {\n    const { plotData, allNames, yRange } = this.getPlotData();\n\n    const MIN_PLOT_WIDTH = 300;\n    const plotMinWidth = Math.max(MIN_PLOT_WIDTH, 11 * (Object.keys(allNames)).length + 100);\n\n    const allColonizations = Object.assign(\n      {},\n      communityColonizations,\n      monoColonizations,\n      conventionalColonizations\n    );\n\n    return (\n      <div className=\"App\">\n        <p>\n          This page enables plotting <em>in vivo</em> data from Han and Van Treuren <em>et al</em>.\n        </p>\n\n        <p>\n          Select a <strong>Colonization</strong> and <strong>Sample Type</strong> below\n          to plot the relative fold change across all metabolites.\n        </p>\n\n        <p>\n          Alternatively, select a <strong>Metabolite</strong> and <strong>Sample Type</strong> below\n          to plot the relative fold change across all colonizations.\n        </p>\n\n        <form className=\"form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"colonization\">Gnotobiotic Mice Colonization</label>\n            <Select id=\"colonization\"\n              className=\"dropdown\"\n              components={{ Option: MultilineOption }}\n              isClearable={true}\n              options = {this.state.colonizationOptions}\n              onChange = {val => this.handleColonizationSelectionChange('colonization', val)}\n              styles={{ option: (provided, state) => ({ ...provided, whiteSpace: 'pre-wrap' }) }}\n              value={this.state.colonizationSelection.colonization\n                ? {\n                  ...allColonizations[this.state.colonizationSelection.colonization],\n                  value: this.state.colonizationSelection.colonization,\n                } : null}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"sample_type\">Sample Type</label>\n            <Select id=\"sample_type\"\n              className=\"dropdown\"\n              isClearable={true}\n              isDisabled={this.state.colonizationSelection.colonization === null}\n              options={this.state.colonizationSampleTypeOptions}\n              onChange = {val => this.handleColonizationSelectionChange('sample_type', val)}\n              value={\n                this.state.colonizationSampleTypeOptions\n                  .find(sampleType => sampleType.value === this.state.colonizationSelection.sampleType) || null\n              }\n            />\n          </div>\n        </form>\n\n        <form className=\"form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"metabolite\">Metabolite</label>\n            <Select id=\"metabolite\"\n              className=\"dropdown\"\n              components={{ MenuList }}\n              isClearable={true}\n              options = {this.state.metaboliteOptions}\n              onChange = {val => this.handleMetaboliteSelectionChange('metabolite', val)}\n              value={\n                this.state.metaboliteOptions\n                  .find(metabolite => metabolite.value === this.state.metaboliteSelection.metabolite) || null\n              }\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"sample_type\">Sample Type</label>\n            <Select id=\"sample_type\"\n              className=\"dropdown\"\n              isClearable={true}\n              isDisabled={this.state.metaboliteSelection.metabolite === null}\n              options = {this.state.metaboliteSampleTypeOptions}\n              onChange = {val => this.handleMetaboliteSelectionChange('sample_type', val)}\n              value={\n                this.state.metaboliteSampleTypeOptions\n                  .find(sampleType => sampleType.value === this.state.metaboliteSelection.sampleType) || null\n              }\n            />\n          </div>\n        </form>\n\n        {plotData.length > 0 ? (\n          <div style={{width: '100%', overflowX: 'scroll', overflowY: 'hidden'}}>\n            <div style={{\n              minWidth: plotMinWidth + 'px',\n              width: plotMinWidth < 500 ? (plotMinWidth + 'px') : null,\n              height: '1100px'\n            }}>\n              <ResponsiveScatterPlotCanvas\n                tooltip={({ node }) => {\n                  return (\n                    <div\n                      style={{\n                        background: '#fff',\n                        border: '1px solid #ccc',\n                        color: node.style.color,\n                        fontSize: '12px',\n                        padding: '6px 6px',\n                      }}\n                    >\n                      <div style={{maxWidth: '400px', wordWrap: 'break-word'}}>\n                        <strong>{this.state.metaboliteSelection.metabolite ? 'colonization' : 'metabolite'}</strong>\n                        : {node.data.name}\n                      </div>\n                      <div><strong>y</strong>: {node.data.formattedY}</div>\n                    </div>\n                    );\n                }}\n                data={plotData}\n                colors={{ scheme: 'category10' }}\n                theme={{fontSize: 10}}\n                pixelRatio={2}\n                margin={{ top: 80, right: 20, bottom: 740, left: 90 }}\n                xScale={{ type: 'linear', min: 0, max: 'auto' }}\n                yScale={{ type: 'linear', min: yRange[0], max: yRange[1] }}\n                nodeSize={4}\n                gridXValues={Object.keys(allNames)}\n                axisBottom={{\n                  format: d => {\n                    return allNames[d];\n                  },\n                  orient: 'bottom',\n                  tickValues: Object.keys(allNames),\n                  tickSize: 5,\n                  tickPadding: 5,\n                  tickRotation: -90,\n                  legend: this.state.metaboliteSelection.metabolite ? 'Colonization' : 'Metabolite',\n                  legendPosition: 'middle',\n                  legendOffset: this.state.metaboliteSelection.metabolite ? 130 : 700\n                }}\n                axisLeft={{\n                  orient: 'left',\n                  tickSize: 5,\n                  tickPadding: 5,\n                  tickRotation: 0,\n                  legend: 'Relative fold change versus germ-free controls (log2)',\n                  legendPosition: 'middle',\n                  legendOffset: -60\n                }}\n              />\n            </div>\n          </div>\n        ) : null}\n\n        {plotData.length == 0 ? (\n          <footer>\n            <p>About the Website:\n              The Metabolomics Data Explorer was designed by Shuo Han.\n              © The Sonnenburg Lab 2020, Stanford University\n            </p>\n          </footer>\n        ) : null}\n      </div>\n    );\n  }\n\n}\n\nexport default InVivo\n","import React from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, NavLink } from \"react-router-dom\";\nimport InVitro from './InVitro.js';\nimport InVivo from './InVivo.js';\n\nconst App = props => {\n  return (\n    <Router>\n      <nav>\n        <span className=\"home\">\n          Metabolomics Data Explorer\n        </span>\n        <ul>\n          <li>\n            <NavLink to=\"/\" exact activeClassName=\"active\">In vitro</NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/invivo\" exact activeClassName=\"active\">In vivo</NavLink>\n          </li>\n        </ul>\n      </nav>\n      <Route path=\"/\" exact component={InVitro} />\n      <Route path=\"/invivo\" exact component={InVivo} />\n\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}